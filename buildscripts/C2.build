<?xml version="1.0" ?>
<project name="C2" default="build" xmlns="http://nant.sf.net/release/0.91/nant.xsd">
	
	<!-- version properties
	     ================== -->

	<!-- get the version number from the environment variable set by the TeamCity	build server -->
	<property name="version" value="${environment::get-variable('BUILD_NUMBER')}" if="${environment::variable-exists('BUILD_NUMBER')}"/>
	<property name="vcs.revision" value="${environment::get-variable('BUILD_VCS_NUMBER')}" if="${environment::variable-exists('BUILD_VCS_NUMBER')}"/>
	<property name="vcs.branch" value="${environment::get-variable('BUILD_VCS_BRANCH')}"  if="${environment::variable-exists('BUILD_VCS_BRANCH')}"/>

	<!-- if not a formal build, then set to a default value -->
	<property name="vcs.branch" value="unknown" overwrite="false"/>
	<property name="version" value="0.0.1" overwrite="false"/>
	<property name="vcs.revision" value="00000000" overwrite="false"/>

	<!-- git has a very long revision string, can truncate to 8 chars -->
	<property name="vcs.revision" value="${string::substring(vcs.revision, 0, 8)}" if="${string::get-length(vcs.revision) &gt; 8}"/>

	<!-- This version is in all the places we need a numeric version number. We can't add the VCS revision as it is a string (GIT) -->
	<property name="numeric.product.version" value="${version}.0"/>
	
	<!-- consider this a formal build if the environment variable is set (TeamCity sets this) -->
	<property name="formal.build" value="${environment::variable-exists('BUILD_NUMBER')} "/>

	<echo message="Version: ${version}"/>
	<echo message="Build: ${vcs.revision}"/>
	<echo message="Branch: ${vcs.branch}"/>
	<echo message="Formal Build: ${formal.build}"/>

	
	<!--  directories external to the source repository 
	      =============================================	-->
	
	<!-- .NET framework directory -->
	<property name="framework.dir" value="${framework::get-framework-directory(nant.settings.currentframework)}"/>
	
	<!-- base directory for external build tools -->
	<property name="tools.dir" value="/build/programs" overwrite="false"/>
	
	<!-- directory for MSBUILD -->
	<property name="msbuild.dir" value="${framework.dir}"/>
	
	<!-- directory for nuget tool -->
	<property name="nuget.dir" value="${tools.dir}/nuget" overwrite="false"/>


	<!-- directories and files in this source repository 
	     ===================================== -->

	<!-- the base directory for the repository -->
	<property name="base.dir" value="${path::get-full-path('..')}"/>
	<echo message="base.dir = ${base.dir}"/>

	<!-- source directory -->
	<property name="src.dir" value="${base.dir}/src"/>
	
	<!-- build scripts directory -->
	<property name="buildscripts.dir" value="${base.dir}/buildscripts"/>
	
	<!-- build directory, ie where the build products go. (This naming convention to be consistent with castle projects) -->
	<property name="output.dir" value="${base.dir}/build"/>
	
	
	<!-- build targets
	     ============= -->

	<target name="clean">
		<nant buildfile="${buildscripts.dir}/C2Target.xml" target="clean">
			<properties>
				<property name="BuildFramework" value="NET35"/>
			</properties>
		</nant>
		<nant buildfile="${buildscripts.dir}/C2Target.xml" target="clean">
			<properties>
				<property name="BuildFramework" value="NET40"/>
			</properties>
		</nant>		
		<delete failonerror="false">
			<fileset>
				<include name="${output.dir}/**"/>
			</fileset>
		</delete>
	</target>

	<target name="timestamps">
		<tstamp unless="${property::exists('build.timestamp')}">
			<formatter property="build.year" pattern="yyyy"/>
			<formatter property="build.timestamp" pattern="yyyy-MM-ddTHH:mm:ss"/>
			<formatter property="build.date" pattern="yyyy-MM-dd"/>
			<formatter property="build.year.month" pattern="yyMM"/>
			<formatter property="build.day.hour" pattern="ddHH"/>
			<formatter property="build.minute.second" pattern="mmss"/>
		</tstamp>
	</target>

	<target name="build.and.test" depends="timestamps">
		<nant buildfile="${buildscripts.dir}/C2Target.xml">
			<properties>
				<property name="BuildFramework" value="NET40"/>
			</properties>
		</nant>
		<nant buildfile="${buildscripts.dir}/C2Target.xml">
			<properties>
				<property name="BuildFramework" value="NET35"/>
			</properties>
		</nant>
	</target>

	<target name="copy.files" depends="build.and.test">
		<mkdir dir="${output.dir}"/>
		<copy file="${src.dir}/C2.Facilities.NH/C2.Facilities.NH.nuspec.template.xml"
					tofile="${output.dir}/C2.Facilities.NH/C2.Facilities.NH.nuspec"/>
		<copy file="${base.dir}/license.txt" todir="${output.dir}/C2.Facilities.NH"/>
	</target>

	<target name="update.nuspec" depends="copy.files">
		<xmlpoke file="${output.dir}/C2.Facilities.NH/C2.Facilities.NH.nuspec"
						 xpath="//version"
						 value="${numeric.product.version}"/>
		<xmlpoke file="${output.dir}/C2.Facilities.NH/C2.Facilities.NH.nuspec"
						 xpath="//copyright"
						 value="Copyright (c) 2004-${build.year}"/>
	</target>

	<target name="version.file" depends="update.nuspec">
		<copy file="${buildscripts.dir}/version.template.xml" tofile="${output.dir}/C2.Facilities.NH/version.xml"/>
		<xmlpoke file="${output.dir}/C2.Facilities.NH/version.xml"
						 xpath="//version"
						 value="${numeric.product.version}"/>
		<xmlpoke file="${output.dir}/C2.Facilities.NH/version.xml"
						 xpath="//commit"
						 value="${vcs.revision}"/>
		<xmlpoke file="${output.dir}/C2.Facilities.NH/version.xml"
						 xpath="//branch"
						 value="${vcs.branch}"/>
		<xmlpoke file="${output.dir}/C2.Facilities.NH/version.xml"
						 xpath="//timestamp"
						 value="${build.timestamp}"/>
	</target>

	<target name="nuget" depends="version.file">
		<exec program="nuget.exe" basedir="${nuget.dir}">
			<arg value="pack"/>
			<arg file="${output.dir}/C2.Facilities.NH/C2.Facilities.NH.nuspec"/>
			<arg value="-BasePath"/>
			<arg path="${output.dir}/C2.Facilities.NH"/>
			<arg value="-OutputDirectory"/>
			<arg path="${output.dir}"/>
		</exec>
		<zip zipfile="${output.dir}/C2.Facilities.NH.${numeric.product.version}.zip">
			<fileset basedir="${output.dir}">
				<include name="C2.Facilities.NH/**"/>
			</fileset>
		</zip>
		<echo message="##teamcity[publishArtifacts '${output.dir}/C2.Facilities.NH.${numeric.product.version}.nupkg']"/>
		<echo message="##teamcity[publishArtifacts '${output.dir}/C2.Facilities.NH.${numeric.product.version}.zip']"/>
	</target>
	
	<target name="build" depends="nuget"/>
</project>
